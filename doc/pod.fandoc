Overview [#overview]
********************
'afEfan' is a library for rendering Embedded Fantom (efan) templates.

Much like 'EJS' for Javascript, 'ERB' for Ruby and 'JSP' for Java, efan lets you embed snippets of Fantom code inside textual
templates.

'afEfan' aims to hit the middle ground between programmatically rendering markup with `web::WebOutStream` and rendering
logicless templates such as [Mustache]`https://bitbucket.org/xored/mustache/`.

> **ALIEN-AID:** If rendering HTML, use [afSlim]`http://repo.status302.com/doc/afSlim/#overview` !!!
> The concise and lightweight template syntax makes generating HTML easy!



Quick Start [#quickStart]
*************************
xmas.efan:
pre>
  <% ctx.times |i| { %>
    Ho!
  <% } %>
  Merry Christmas!
<pre

Fantom code:
pre>
  template := `xmas.efan`.toFile.readAllStr

  Efan().renderFromFile(template, 3)   // --> Ho! Ho! Ho! Merry Christmas!
<pre



Tags [#tags]
************
> **ALIEN-AID:** efan believes templates are sacred! It preserves all formatting and all whitespace **not** contained in
> '<% ... %>' tags. Even DOS / UNIX line-endings are preserved!

Efan supports the following tags:

Eval Tags [#evalTags]
=================
Any tag with the prefix '<%=' will evaluate the fantom expression and write it out as a Str.

  Hello, <%= "Emma".upper %>!

Comment Tags [#commentTags]
=======================
Any tag with the prefix '<%#' is a comment and will be left out of the resulting template.

  <%# This is just a comment %>

Code Tags [#codeTags]
=======================
Any tag with the prefix '<%' will be converted into Fantom code.

  <% echo("Hello!") %>

> **ALIEN-AID:** When casting or using static methods in efan templates, be sure to use the fully qualified class name (FQCN)
> including the pod. Example:

> <% concurrent::Actor.sleep(2sec) %>

Template Context [#ctx]
=======================
Each template render method takes an argument called 'ctx' which you can reference in your template.
'ctx' is typed to whatever Obj you pass in, so you don't need to cast it. Examples:

Using maps:
pre>
  ctx := ["name":"Emma"]  // ctx is a map

  template := "Hello <%= ctx["name"] %>!"

  Efan().renderFromStr(template, ctx)
<pre

Using objs:
pre>
  class Entity {
    Str name
    new make(Str name) { this.name = name }
  }

  ...

  ctx      := Entity("Emma")  // ctx is an Entity

  template := "Hello <%= ctx.name %>!"

  Efan().renderFromStr(template, ctx)
<pre



View Helpers [#viewHelpers]
***************************
Efan lets you provide view helpers for common tasks. View helpers are 'mixins' that your efan template will extend, giving your
templates access to commonly used methods. Example, for escaping XML:

pre>
mixin XmlViewHelper {
  Str xml(Str str) {
    str.toXml()
  }
}
<pre

Set view helpers when calling efan:

pre>
  Efan().renderFromStr(template, ctx, [XmlViewHelper#])
<pre

Template usage would then be:

pre>
  <p>
    Hello <%= xml(ctx.name) %>!
  </p>
<pre



Layout Pattern / Nesting Templates [#nestingTemplates]
******************************************************
Efan templates may be nested inside one another, effectively allowing you to componentise your templates. This is accomplished
by passing body functions in to the efan 'render()' method and calling 'renderBody()' to invoke it.


This is best explained in an example. Here we will use the *layout pattern* to place some common HTML into a 'layout.efan' file:

layout.efan:
pre>
<head>
  <title><%= ctx %></title>
</head>
<body>
  <%= renderBody() %>
</body>
<pre

index.efan:
pre>
<html>
<%= ctx.layout.render("Cranberry Whips") { %>
    ...my cool page content...
<% } %>
</html>
<pre

Code to run the above example:

Index.fan:
pre>
using afEfan

class Index {
  Str renderIndex() {
    index     := efan().compileFromFile(`index.efan` .toFile, EfanRenderer#)
    layout    := efan().compileFromFile(`layout.efan`.toFile, Str#)

    return index.render(layout)
  }
}
<pre

This produces an amalgamation of the two templates:

pre>
<html>
<head>
  <title>Cranberry Whips</title>
</head>
<body>
    ...my cool page content...
</body>
</html>
<pre



Err Reporting [#errReporting]
*****************************
Efan compilation and runtime Errs report snippets of code showing which line in the 'efan' template the error occurred.
Example:

pre>
Efan Compilation Err:
  file:/projects/fantom/Efan/test/app/compilationErr.efan : Line 17
    - Unknown variable 'dude'

    12: Five space-worthy orbiters were built; two were destroyed in mission accidents. The Space...
    13: </textarea><br/>
    14:         <input id="submitButton" type="button" value="Submit">
    15:     </form>
    16:
==> 17: <% dude %>
    18: <script type="text/javascript">
    19:     <%# the host domain where the scanner is located %>
    20:
    21:     var plagueHost = "http://fan.home.com:8069";
    22:     console.debug(plagueHost);
<pre

This really helps you see where typos occurred.



Renderers [#renderers]
**********************
Efan works by dynamically generating Fantom source code and compiling it into a Fantom type. Because types can not be
*unloaded*, if you were compile 1000s of efan templates, it could be considered a memory leak.

Each invocation of `EfanCompiler.compile` creates a new Fantom type, so use it judiciously. Caching the returned
`EfanRenderer` classes is highly recommended. Example:

pre>
  template := "<% ctx.times |i| { %>Ho! <% } %>"
  renderer := EfanCompiler().compile(template, Int#)  // <-- cache this class!

  ho       := renderer.render(1)
  hoho     := renderer.render(2)
  hohoho   := renderer.render(3)
<pre



Release Notes [#releaseNotes]
*****************************

v1.3.2 [#v1.3.2]
----------------
 - Chg: Moved 'EfanRenderer.id' -> 'EfanMetaData.templateId'

v1.3.0 [#v1.3.0]
----------------
 - Chg: Rejigged the public efan API.
 - Chg: Removed 'EfanRenderer.renderEfan(...)'. All template rendering is done via 'EfanRenderer.render(...)'.
 - Chg: Nested efan templates and body functions now return a 'Str', so you MUST use eval tags; '<%= renderBody() %>'
 - Chg: Massivly simplified nested component rendering by introducing a threaded 'EfanCtxStack'.
 - Chg: Added 'EfanRenderer.id' to make debugging EfanExtra a bit more humane!

v1.2.0 [#v1.2.0]
----------------
 - New: Runtime Errs thrown while rendering report efan template code snippets and line numbers.
 - New: `EfanRenderer` now has an 'efanMetaData' field with more contextual information.
 - New: The class name of efan renderer instances is now configurable.
 - Chg: Rejigged the efan parser.
 - Chg: Efan template line numbers no longer take up a whole line of code.
 - Chg: `EfanCompiler` now returns a 'const' `EfanRenderer` instance, not a rendering type.
 - Chg: Exposed (made public) the 'EfanErr' hierarchy.
 - Chg: Added optional 'makeFunc' to 'EfanCompiler.compileWithModel()'.

v1.1.0 [#v1.1.0]
----------------
 - New: Added 'EfanRenderCtx' to ease efan extensions.
 - Chg: Updated to use [afPlastic]`http://repo.status302.com/doc/afPlastic/#overview`.
 - Chg: `EfanCompiler` now returns the rendering type, not an 'EfanRenderer' instance.
 - Chg: `EfanRenderer` is now a mixin and is implemented by the rendering type.
 - Chg: 'renderEfan()' and 'renderBody()' are now methods on `EfanRenderer`.

v1.0.0 [#v1.0.0]
----------------
 - New: Efan templates may now be nested and can optionally render their body!
 - Chg: `EfanCompiler` wraps the generated renderer in a sane 'const' `EfanRenderer` wrapper.
 - Chg: Removed dependency on [afBedSheet]`http://repo.status302.com/doc/afBedSheet/#overview` - see
 [afBedSheetEfan]`http://repo.status302.com/doc/afBedSheetEfan/#overview` for BedSheet integration.
 - Chg: Removed dependency on [afIoc]`http://repo.status302.com/doc/afIoc/#overview`, all 'afPlastic' has been copied in to efan.
 - Chg: Updated docs.

v0.0.4 [#v0.0.4]
----------------
 - New: Hooked error reporting into afBedSheet.
 - New: `EfanErr` now gives code snippets and line numbers of parsing and compilation errors.
 - Chg: Re-factored fantom code generation.

v0.0.2 [#v0.0.2]
----------------
 - New: Preview release.

