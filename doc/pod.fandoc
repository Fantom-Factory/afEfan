Overview [#overview]
********************
afEfan is a [Fantom]`http://fantom.org/` library for rendering Embedded Fantom (efan) templates.

Much like EJS for Javascript, ERB for Ruby and JSP for Java, EFAN allows you to embed snippets of Fantom code inside textual
templates.

Efan aims to hit the middle ground between programmatically rendering markup with `web::WebOutStream` and using
logicless templates with [Mustache]`https://bitbucket.org/xored/mustache/`.



Quick Start [#quickStart]
*************************
xmas.efan:
pre>
  <% ctx.times |i| { %>
    Ho!
  <% } %>
  Merry Christmas!
<pre

Fantom code:
pre>
  // --> Ho! Ho! Ho! Merry Christmas!
  Efan().renderFromFile(`xmas.efan`.toFile.readAllStr, 3)
<pre



Tags [#tags]
************
Efan supports the following tags:

Eval Tags [#eval]
=================
Any tag with the prefix '<%=' will evaluate the fantom expression and write it out as a Str.

  Hello, <%= "Emma".upper %>!

Comment Tags [#comment]
=======================
Any tag with the prefix '<%#' is a comment and will be left out of the resulting template.

  <%# This is just a comment %>

Fantom Code Tags [#fantomCode]
==============================
Any tag with the prefix '<%' will be converted into Fantom code.

  <% echo("Hello!") %>

Passing Data [#ctx]
===================
Tags are nice, but not much use unless you can pass data in. Thankfully, you can!

Each render method takes an argument called 'ctx' which you can reference in your template. 'ctx' is typed to whatever Obj
you pass in, so you don't need to cast it. Examples:

Using maps:
pre>
  template := "Hello <%= ctx["name"] %>!"

  ctx      := ["name":"Emma"]

  Efan().renderFromStr(template, ctx)
<pre

Using objs:
pre>
  class Entity {
    Str? name
  }

  ...

  template := "Hello <%= ctx.name %>!"

  ctx      := Entity() { it.name = "Emma"}

  Efan().renderFromStr(template, ctx)
<pre



View Helpers [#viewHelpers]
***************************
Efan lets you provide view helpers for common tasks. View helpers are 'mixins' that your efan template can extend, giving your
templates access to commonly used methods. Example, for escaping XML:

pre>
mixin XmlViewHelper {
  Str xml(Str str) {
    str.toXml()
  }
}
<pre

Set view helpers when calling efan:

pre>
  Efan().renderFromStr(template, ctx, [XmlViewHelper#])
<pre

Template usage would then be:

pre>
  <p>
    Hello <%= xml(ctx.name) %>!
  </p>
<pre



Renderers [#renderers]
**********************
Efan works by dynamically generating Fantom source code and compiling it into a Fantom type. Because types can not be
*unloaded*, if you were compile 1000s of efan templates, it could be considered a memory leak.

Each invocation of `EfanCompiler.compile` creates a new Fantom type, so use it judiciously. Caching the returned `EfanRenderer`s is highly
recommended. Example:

pre>
  template := "<% ctx.times |i| { %>Ho! <% } %>Merry Christmas!"
  renderer := EfanCompiler().compile(template, Int#)	// <-- cache this renderer!

  ho       := renderer.render(1)
  hoho     := renderer.render(2)
  hohoho   := renderer.render(3)
<pre



Nesting Templates [#nestingTemplates]
*************************************
Efan templates may be nested inside one another, effectively allowing you to componentise your templates. This is accomplished
by use of 2 methods added to every efan renderer:

  ** Renders the given renderer with the given ctx.
  renderEfan(EfanRenderer renderer, Obj? ctx)

  ** When nested, renders the body of the outer component.
  renderBody()

This is best explained in an example. Here we will use the Layout Pattern to move some common HTML into a 'layout.efan' file:

meat.efan:
pre>
<html>
<% renderEfan(ctx["layout"], ctx["layoutCtx"]) { %>
  <div>
    ...my cool page content...
  </div>
<% } %>
</html>
<pre

layout.efan:
pre>
<head>
  <title><%= ctx["pageTitle"] %></title>
</head>
<body>
  <div> header </div>
  <div> menu stuff </div>

  <% renderBody %>

  <div> footer </div>
</body>
<pre

Note that the layout component wraps content in 'meat.efan' which is rendered by the call to 'renderBody'.

Meat.fan:
pre>
using afEfan

class Meat {
  Str renderMeat() {
    compiler  := EfanCompiler()

    layout    := compiler.compile(`layout.efan`, `layout.efan`.toFile.readAllStr, Map#)
    meat      := compiler.compile(`meat.efan`,   `meat.efan`.toFile.readAllStr,   Map#)

    layoutCtx := ["pageTitle": "Meat Page"]
    meatCtx   := ["layout": layout, "layoutCtx": layoutCtx]

    return meat.render(meatCtx)
  }
}
<pre

Running the above would then produce an amalgamation of the two templates:

pre>
<html>
<head>
  <title>Meat Page</title>
</head>
<body>
  <div> header </div>
  <div> menu stuff </div>

  <div>
    ...my cool page content...
  </div>

  <div> footer </div>
</body>
</html>
<pre



Err Reporting [#errReporting]
*****************************
Efan compilation errs return snippets of code showing on which line in the 'efan' src the error occurred.

pre>
Efan Compilation Err:
  file:/projects/fantom/Efan/test/app/compilationErr.efan : Line 17
    - Unknown variable 'dude'

    12: Five space-worthy orbiters were built; two were destroyed in mission accidents. The Space...
    13: </textarea><br/>
    14:         <input id="submitButton" type="button" value="Submit">
    15:     </form>
    16:
==> 17: <% dude %>
    18: <script type="text/javascript">
    19:     <%# the host domain where the scanner is located %>
    20:
    21:     var plagueHost = "http://fan.home.com:8069";
    22:     console.debug(plagueHost);
<pre



Release Notes [#releaseNotes]
*****************************

v1.1.0 [#v1.1.0]
----------------
 - New: Added 'EfanRenderCtx' to ease efan extensions.
 - Chg: Updated to use [afPlastic]`http://repo.status302.com/doc/afPlastic/#overview`.
 - Chg: The `EfanCompiler` now returns the rendering type, not an 'EfanRenderer' instance.
 - Chg: `EfanRenderer` is now a mixin and is implemented by the rendering type.
 - Chg: 'renderEfan()' and 'renderBody()' are now methods on `EfanRenderer`.

v1.0.0 [#v1.0.0]
----------------
 - New: Efan templates may now be nested and can optionally render their body!
 - Chg: `EfanCompiler` wraps the generated renderer in a sane 'const' `EfanRenderer` wrapper.
 - Chg: Removed dependency on [afBedSheet]`http://repo.status302.com/doc/afBedSheet/#overview` - see
 [afBedSheetEfan]`http://repo.status302.com/doc/afBedSheetEfan/#overview` for BedSheet integration.
 - Chg: Removed dependency on [afIoc]`http://repo.status302.com/doc/afIoc/#overview`, all 'afPlastic' has been copied in to efan.
 - Chg: Updated docs.

v0.0.4 [#v0.0.4]
----------------
 - New: Hooked error reporting into afBedSheet.
 - New: `EfanErr` now gives code snippets and line numbers of parsing and compilation errors.
 - Chg: Re-factored fantom code generation.

v0.0.2 [#v0.0.2]
----------------
 - New: Preview release.

