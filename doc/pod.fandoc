Overview [#overview]
********************
afEfan is a [Fantom]`http://fantom.org/` [afIoc]`http://repo.status302.com/doc/afIoc/#overview` library for rendering
Embedded Fantom (efan) templates.

Much like EJS for Javascript, ERB for Ruby and JSP for Java, EFAN allows you to embed snippets of Fantom code inside textual
templates.

Efan hopes to hit the middle ground between programmatically rendering markup with `web::WebOutStream` and using
logicless templates with [Mustache]`https://bitbucket.org/xored/mustache/`.



Quick Start [#quickStart]
*************************

pre>
  @Inject EfanTemplates? efanTemplates

  ...

  template := "<% ctx.times |i| { %>Ho! <% } %>Merry Christmas!"
  output   := efanTemplates.renderFromStr(template, 3)
  // --> Ho! Ho! Ho! Merry Christmas!
<pre

Usage [#usage]
**************
Efan supports the following tags:

Eval Tags [#eval]
=================
Any tag with the prefix '<%=' will evaluate the fantom expression and write it out as a Str.

  Hello, <%= "Emma" %>!

Comment Tags [#comment]
=======================
Any tag with the prefix '<%#' is a comment and will be left out of the resulting template.

  <%# This is just a comment %>

Fantom Code Tags [#fantomCode]
==============================
Any tag with the prefix '<%' will be converted into Fantom code.

  <% echo("Hello!") %>

Passing Data [#ctx]
===================
Tags are nice, but not much use unless you can pass data in. Thankfully, you can!

Each render method takes an argument called 'ctx' which you can reference in your template. 'ctx' is typed to whatever Obj
you pass in, so you don't need to cast it. Examples:

Use maps:
pre>
  template := "Hello <%= ctx["name"] %>!"
  efanTemplates.renderFromStr(template, ["name":"Emma"])
<pre

Use objs:
pre>
  template := "Hello <%= ctx.name %>!"
  efanTemplates.renderFromStr(template, Entity() { it.name = "Emma"})

  ...

  class Entity {
    Str? name
  }
<pre



View Helpers
************
Efan lets you provide view helpers for common tasks. View helpers are 'mixins' that your efan template can extend, giving your
templates access to commonly used methods. Example, for escaping XML:

pre>
const mixin XmlViewHelper {
  Str x(Str str) {
    str.toXml()
  }
}
<pre

Contribute View Helpers in your 'AppModule':

pre>
  @Contribute { serviceType=EfanViewHelpers# }
  static Void contrib(OrderedConfig conf) {
    conf.add(XmlViewHelper#)
  }
<pre

Template usage would then be:

pre>
  <p>
    Hello <%= x(ctx.name) %>!
  </p>
<pre



Fair Usage Policy!
******************
Efan works by dynamically generating Fantom source code and compiling it into a Fantom type. Because types can not be
*unloaded*, if you were compile 1000s of efan templates, it could be considered a memory leak.

For this reason, templates compiled from files are cached and reused, therefore posing no risk in your typical web
application(*). But templates compiled [from Strs]`EfanTemplates.renderFromStr` are not cached and so calls to this method
should be made judiciously.

(*) If a template file seen to be modified, the efan template is re-compiled on the fly. This is fine in dev, but be weary of
modifying template files in live.



Non afIoc Applications
**********************
Efan was created predominantly for [afIoc]`http://repo.status302.com/doc/afIoc/#overview` applications but may still be used
outside of an IoC by means of the `EfanCompiler` class. Example:

pre>
  template := "<% ctx.times |i| { %>Ho! <% } %>Merry Christmas!"
  output   := EfanCompiler().compile(template, Int#)->render(3)
<pre

Note that each invocation of 'EfanCompiler.compile' creates a new Fantom type. So it is suggested that it be called sparingly
as not to cause a memory leaks. Caching of the returned renderers is highly recommended.

The Obj returned from 'compile' has the following slots:

  Type ctxType
  Str render(<ctxType> ctx)

where ctxType is the type passed into the compile method. Because the render() method signature is dependant on the ctx type,
the return value can not be a static mixin type. Therefore all renderer invocations must be dynamic.



Release Notes [#releaseNotes]
*****************************

v0.0.2 [#v0.0.2]
----------------
 - New: Preview release.

