Overview [#overview]
********************
afEfan is a [Fantom]`http://fantom.org/` library for rendering Embedded Fantom (efan) templates.

Much like EJS for Javascript, ERB for Ruby and JSP for Java, EFAN allows you to embed snippets of Fantom code inside textual
templates.

Efan hopes to hit the middle ground between programmatically rendering markup with `web::WebOutStream` and using
logicless templates with [Mustache]`https://bitbucket.org/xored/mustache/`.



Quick Start [#quickStart]
*************************
xmas.efan:
pre>
  <% ctx.times |i| { %>
    Ho!
  <% } %>
  Merry Christmas!
<pre

Fantom code:
pre>
  // --> Ho! Ho! Ho! Merry Christmas!
  Efan().renderFromFile(`xmas.efan`.toFile.readAllStr, 3)
<pre



Tags [#tags]
************
Efan supports the following tags:

Eval Tags [#eval]
=================
Any tag with the prefix '<%=' will evaluate the fantom expression and write it out as a Str.

  Hello, <%= "Emma" %>!

Comment Tags [#comment]
=======================
Any tag with the prefix '<%#' is a comment and will be left out of the resulting template.

  <%# This is just a comment %>

Fantom Code Tags [#fantomCode]
==============================
Any tag with the prefix '<%' will be converted into Fantom code.

  <% echo("Hello!") %>

Passing Data [#ctx]
===================
Tags are nice, but not much use unless you can pass data in. Thankfully, you can!

Each render method takes an argument called 'ctx' which you can reference in your template. 'ctx' is typed to whatever Obj
you pass in, so you don't need to cast it. Examples:

Use maps:
pre>
  template := "Hello <%= ctx["name"] %>!"
  Efan().renderFromStr(template, ["name":"Emma"])
<pre

Use objs:
pre>
  template := "Hello <%= ctx.name %>!"
  Efan().renderFromStr(template, Entity() { it.name = "Emma"})

  ...

  class Entity {
    Str? name
  }
<pre



View Helpers [#viewHelpers]
***************************
Efan lets you provide view helpers for common tasks. View helpers are 'mixins' that your efan template can extend, giving your
templates access to commonly used methods. Example, for escaping XML:

pre>
const mixin XmlViewHelper {
  Str x(Str str) {
    str.toXml()
  }
}
<pre

Set view helpers when calling efan:

pre>
  Efan().renderFromStr(template, ctx, [XmlViewHelper#])
<pre

Template usage would then be:

pre>
  <p>
    Hello <%= x(ctx.name) %>!
  </p>
<pre



Err Reporting [#errReporting]
*****************************
Efan compilation errs return snippets of code showing on which line in the 'efan' src the error occurred.

pre>
Efan Compilation Err:
  file:/projects/fantom/Efan/test/app/compilationErr.efan : Line 17
    - Unknown variable 'dude'

    12: Five space-worthy orbiters were built; two were destroyed in mission accidents. The Space...
    13: </textarea><br/>
    14:         <input id="submitButton" type="button" value="Submit">
    15:     </form>
    16:
==> 17: <% dude %>
    18: <script type="text/javascript">
    19:     <%# the host domain where the scanner is located %>
    20:
    21:     var plagueHost = "http://fan.home.com:8069";
    22:     console.debug(plagueHost);
<pre



Renderers [#renderers]
**********************
Efan works by dynamically generating Fantom source code and compiling it into a Fantom type. Because types can not be
*unloaded*, if you were compile 1000s of efan templates, it could be considered a memory leak. Example:

pre>
  template := "<% ctx.times |i| { %>Ho! <% } %>Merry Christmas!"
  renderer := EfanCompiler().compile(template, Int#)
  output   := renderer->render(3)
<pre

Each invocation of 'compile' creates a new Fantom type, so use it judiciously. Caching of the returned renderers is highly
recommended.

The 'renderer' returned from 'compile' has the following slots:

  Type ctxType
  Str render(<ctxType> ctx)

where ctxType is the type passed into the compile method. Because the 'render()' method signature is dependant on the ctx type,
it cannot be declared by a mixin. Therefore all renderer invocations must be dynamic.



Release Notes [#releaseNotes]
*****************************

v0.0.6 [#v0.0.6]
----------------
 - Chg: Removed dependency on [afIoc]`http://repo.status302.com/doc/afIoc/#overview`, all 'afPlastic' has been copied in to efan.
 - Chg: Removed dependency on [afBedSheet]`http://repo.status302.com/doc/afBedSheet/#overview` - see
 [afBedSheetEfan]`http://repo.status302.com/doc/afBedSheetEfan/#overview` for BedSheet integration.
 - Chg: Updated docs.

v0.0.4 [#v0.0.4]
----------------
 - New: Hooked error reporting into afBedSheet.
 - New: `EfanErr` now gives code snippets and line numbers of parsing and compilation errors.
 - Chg: Re-factored fantom code generation.

v0.0.2 [#v0.0.2]
----------------
 - New: Preview release.

